#!/usr/bin/env bash

set -o errexit
set -o nounset
set -o pipefail

working_dir="$(dirname ${0})"

source "${working_dir}/_sourced/constants.sh"
source "${working_dir}/_sourced/messages.sh"

if [[ -z ${1+x} ]]; then
    message_error "Backup filename is required."  
    exit 1
fi

backup_filename="${BACKUP_DIR_PATH}/${1}"

if [[ ! -f "${backup_filename}" ]]; then
    message_error "Backup file ${backup_filename}' does not exist."  
    exit 1
fi  

message_welcome "Restoring the '${POSTGRES_DB}' database from '${backup_filename}'..."

if [[ "${POSTGRES_USER}" == "postgres" ]]; then
    message_error "Restoring as 'postgres' user is not allowed. Assign 'POSTGRES_USER' environment variable to a different user."  
    exit 1
fi

export PGHOST="${POSTGRES_HOST}"
export PGPORT="${POSTGRES_PORT}"
export PGUSER="${POSTGRES_USER}"
export PGPASSWORD="${POSTGRES_PASSWORD}"
export PGDATABASE="${POSTGRES_DB}" 

message_info "Dropping the '${POSTGRES_DB}' database..."

dropdb --if-exists "${POSTGRES_DB}"

message_info "Creating the '${POSTGRES_DB}' database..."

createdb "${POSTGRES_DB}"

message_info "Creating the '${POSTGRES_DB}' database schema..."

createdb --owner="${POSTGRES_USER}"

message_info "Applying the backup to the new database ..."

gunzip -c "${backup_filename}" | psql "${POSTGRES_DB}"

message_success "'${POSTGRES_DB}' database restored from '${backup_filename}' has been created successfully."


